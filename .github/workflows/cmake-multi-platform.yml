# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: run tests and benchmark when deploying to main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug]
        include:
          - os: windows-latest
            cpp_compiler: cl
          - os: ubuntu-latest
            cpp_compiler: g++
          - os: ubuntu-latest
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install GTK and dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libgtk-3-dev \
          libglib2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libepoxy-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxi-dev \
          libxinerama-dev \
          libxcursor-dev

    - name: Download wxWidgets on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.5/wxWidgets-3.2.5.tar.bz2
        tar xf wxWidgets-3.2.5.tar.bz2
        cd wxWidgets-3.2.5
        mkdir build-static
        cd build-static

        cmake .. \
          -DwxBUILD_SHARED=OFF \
          -DwxBUILD_TOOLKIT=gtk3 \
          -DwxBUILD_SAMPLES=OFF \
          -DwxBUILD_TESTS=OFF \
          -DCMAKE_INSTALL_PREFIX=$HOME/wx-static

        cmake --build . --parallel
        cmake --install .

    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -DBUILD_BENCHMARK=ON
        -S ${{ github.workspace }}
      shell: bash

    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-toolchain
          wget
          make
          mingw-w64-x86_64-cmake

    - name: Build wxWidgets (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export PATH="/c/msys64/mingw64/bin:$PATH"
        wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.5/wxWidgets-3.2.5.tar.bz2
        tar xf wxWidgets-3.2.5.tar.bz2
        cd wxWidgets-3.2.5
        mkdir build-static && cd build-static

        cmake .. \
          -G "MinGW Makefiles" \
          -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
          -DwxBUILD_SHARED=OFF \
          -DwxBUILD_TOOLKIT=msw \
          -DwxBUILD_SAMPLES=OFF \
          -DwxBUILD_TESTS=OFF \
          -DCMAKE_INSTALL_PREFIX=$HOME/wx-static

        make -j$(nproc || echo 2)
        make install
      
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export PATH="/c/msys64/mingw64/bin:$PATH"
        cmake -B build -S "$(cygpath -u "$GITHUB_WORKSPACE")" \
          -G "MinGW Makefiles" \
          -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARK=ON \
          -DCMAKE_PREFIX_PATH=$HOME/wx-static

    - name: Build Project (Linux)
      if: matrix.os == 'ubuntu-latest'
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build Project (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export PATH="/c/msys64/mingw64/bin:$PATH"
        cmake --build build

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run benchmark on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        ./this_benchmark
      shell: bash

    - name: Run benchmark on Windows
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location -Path '${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}'
        .\this_benchmark.exe
      shell: powershell
