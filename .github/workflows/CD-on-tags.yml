permissions:
  contents: write
  issues: read
  pull-requests: read

name: Release linux with CPack packages

on:
  push:
    tags:
      - '*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      # package-path-tgz: ${{ steps.set-path-tgz.outputs.package-path-tgz }}
      package-path-appimage: ${{ steps.set-path-appimage.outputs.package-path-appimage }}
    steps:
    - uses: actions/checkout@v4

    - name: Install GTK and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libx11-dev
        sudo apt-get install -y \
          build-essential \
          libgtk-3-dev \
          libglib2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libepoxy-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxi-dev \
          libxinerama-dev \
          libxcursor-dev

    - name: Download wxWidgets
      run: |
        wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.5/wxWidgets-3.2.5.tar.bz2
        tar xf wxWidgets-3.2.5.tar.bz2
        cd wxWidgets-3.2.5
        mkdir build-static
        cd build-static

        cmake .. \
          -DwxBUILD_SHARED=OFF \
          -DwxBUILD_TOOLKIT=gtk3 \
          -DwxBUILD_SAMPLES=OFF \
          -DwxBUILD_TESTS=OFF \
          -DCMAKE_INSTALL_PREFIX=$HOME/wx-static

        cmake --build . --parallel
        cmake --install .

    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++ -DGENERATE_APPIMAGE=ON

    - name: Build project
      run: cmake --build build --config Release

    - name: Package with CPack
      working-directory: build
      run: cpack

    # - name: Get package path (TGZ)
    #   id: set-path-tgz
    #   run: |
    #     PACKAGE_FILE_TGZ=$(ls build/*.tgz build/*.tar.gz 2>/dev/null || echo "")
    #     echo "package-path-tgz=$PACKAGE_FILE_TGZ" >> $GITHUB_OUTPUT

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: linux-package-tgz
    #     path: |
    #       build/*.tgz
    #       build/*.tar.gz

    - name: Get package path (AppImage)
      id: set-path-appimage
      run: |
        PACKAGE_FILE_APPIMAGE=$(ls build/*.AppImage 2>/dev/null || echo "")
        echo "package-path-appimage=$PACKAGE_FILE_APPIMAGE" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: linux-package-appImage
        path: |
          build/*.AppImage


  release:
    needs: [build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    # - name: Download Linux package (TGZ)
    #   uses: actions/download-artifact@v5
    #   with:
    #     name: linux-package-tgz
    #     path: ./linux

    - name: Download Linux package (AppImage)
      uses: actions/download-artifact@v5
      with:
        name: linux-package-appImage
        path: ./linux

    - name: Generate release notes from GitHub
      id: notes
      uses: actions/github-script@v7
      with:
        script: |
          const { data } = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.ref.replace('refs/tags/', '')
          });
          core.setOutput("notes", data.body);

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          # üõë Featureless release
          Please note that this release is used to test for integration and compatibility. If you are reading this, I highly encourage you to download the release for your OS and try to open the app. Any feedback is highly appreciated!

          ### üîí Windows Security Notice

          ‚ö†Ô∏è When running the `.exe` for the first time, Windows may display a **"Windows protected your PC"** warning. This is expected and happens because the file is not digitally signed (I don't have the resources to purchase a digital signature ;) )

          This application is safe to use and does **not** contain any malware. The warning appears simply because the executable is new and unsigned.

          #### How to run the application on Windows:

          First, download the zip file and decompress it

          1. After launching the `.exe`, if you see the blue "Windows protected your PC" screen:
            - Click on **"More info"**
            - Then click on **"Run anyway"**

          <p align="center">
          <img width="367" height="323" alt="image" src="./assets/windows-security-screen.png" />
          </p>

          2. Make sure all `.dll` files remain in the same folder as the `.exe`.

          3. Search for `DeskUp.exe` and run it!
          
          > Note: You do **not** need to install anything else ‚Äî all dependencies are included.

          ---

          #### How to run the application on Linux:

          1. Download the .AppImage file (at the bottom!) and give it permissions:

          ```bash
          chmod +x DeskUp-${{ github.ref_name }}-x86_64.AppImage
          ```

          2. Run the AppImage once:

          ```bash
          ./DeskUp-${{ github.ref_name }}-x86_64.AppImage
          ```

          The application will integrate automatically. You can delete the downloaded .AppImage if you want

          <!--  ##### B. Using .tgz/.tar.gz

          0. Download the dependencies required by the project:

          ```bash
          sudo apt-get update
          sudo apt-get install -y \
          build-essential \
          libgtk-3-dev \
          libglib2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libepoxy-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxi-dev \
          libxinerama-dev \
          libxcursor-dev
          ```

          1. Download the `.tgz` package (at the bottom!) and extract it:

          ```bash
          tar -xzf DeskUp-${{ github.ref_name }}-Linux.tgz
          ```

          2. Navigate into the extracted folder, give the app permissions and run the executable:

          ```bash
          cd DeskUp-${{ github.ref_name }}-Linux/bin
          chmod +x DeskUp
          ./DeskUp
          ``` -->

          üöÄ **Release notes**

          ${{ steps.notes.outputs.notes }}

        draft: false
        prerelease: false

    - name: Find Linux package file (.AppImage)
      id: find-package-appimage
      run: |
        FILE=$(ls ./linux/*.AppImage 2>/dev/null | head -n 1)
        echo "package_path_appimage=$FILE" >> $GITHUB_OUTPUT

    - name: Upload Linux asset (.AppImage)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-package-appimage.outputs.package_path_appimage }}
        asset_name: DeskUp-${{ github.ref_name }}-x86_64.AppImage
        asset_content_type: application/octet-stream

    # - name: Find Linux package file (TGZ)
    #   id: find-package-tgz
    #   run: |
    #     FILE=$(ls ./linux/*.tgz ./linux/*.tar.gz 2>/dev/null | head -n 1)
    #     echo "package_path_tgz=$FILE" >> $GITHUB_OUTPUT

    # - name: Upload Linux asset (TGZ)
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ${{ steps.find-package-tgz.outputs.package_path_tgz }}
    #     asset_name: DeskUp-${{ github.ref_name }}-Linux.tgz
    #     asset_content_type: application/gzip

    - name: Checkout Windows package repo
      uses: actions/checkout@v4
      with:
        repository: NicolasSerranoGarcia/DeskUp-win-package
        token: ${{ secrets.PAT_TOKEN }}
        path: win-package

    - name: Find Windows package file
      id: find-windows-package
      run: |
        FILE=$(ls win-package/*.zip | head -n 1)
        echo "package_path=$FILE" >> $GITHUB_OUTPUT

    - name: Upload Windows asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-windows-package.outputs.package_path }}
        asset_name: DeskUp-${{ github.ref_name }}-Windows.zip
        asset_content_type: application/zip