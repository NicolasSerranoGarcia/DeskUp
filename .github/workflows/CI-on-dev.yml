name: Trigger tests and benchmark on development branches (linux only)

on:
  push:
    branches: [ "develop/*", "feature/*", "fix/*" ]
  pull_request:
    branches: [ "develop/*", "feature/*", "fix/*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        cpp_compiler: [g++, clang++]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install GTK and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libx11-dev
        sudo apt-get install -y \
          build-essential \
          libgtk-3-dev \
          libglib2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libepoxy-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxi-dev \
          libxinerama-dev \
          libxcursor-dev

    - name: Download wxWidgets
      run: |
        wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.5/wxWidgets-3.2.5.tar.bz2
        tar xf wxWidgets-3.2.5.tar.bz2
        cd wxWidgets-3.2.5
        mkdir build-static
        cd build-static

        cmake .. \
          -DwxBUILD_SHARED=OFF \
          -DwxBUILD_TOOLKIT=gtk3 \
          -DwxBUILD_SAMPLES=OFF \
          -DwxBUILD_TESTS=OFF \
          -DCMAKE_INSTALL_PREFIX=$HOME/wx-static

        cmake --build . --parallel
        cmake --install .

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -DBUILD_BENCHMARK=ON
        -S ${{ github.workspace }}
      shell: bash

    - name: Build Project
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run benchmark
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        ./this_benchmark
      shell: bash